/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Resources as PrismaResources } from "@prisma/client";

export class ResourcesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResourcesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.resources.count(args);
  }

  async resourcesItems(
    args: Prisma.ResourcesFindManyArgs
  ): Promise<PrismaResources[]> {
    return this.prisma.resources.findMany(args);
  }
  async resources(
    args: Prisma.ResourcesFindUniqueArgs
  ): Promise<PrismaResources | null> {
    return this.prisma.resources.findUnique(args);
  }
  async createResources(
    args: Prisma.ResourcesCreateArgs
  ): Promise<PrismaResources> {
    return this.prisma.resources.create(args);
  }
  async updateResources(
    args: Prisma.ResourcesUpdateArgs
  ): Promise<PrismaResources> {
    return this.prisma.resources.update(args);
  }
  async deleteResources(
    args: Prisma.ResourcesDeleteArgs
  ): Promise<PrismaResources> {
    return this.prisma.resources.delete(args);
  }
}
