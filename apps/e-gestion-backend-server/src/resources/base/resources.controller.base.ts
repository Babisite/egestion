/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResourcesService } from "../resources.service";
import { ResourcesCreateInput } from "./ResourcesCreateInput";
import { Resources } from "./Resources";
import { ResourcesFindManyArgs } from "./ResourcesFindManyArgs";
import { ResourcesWhereUniqueInput } from "./ResourcesWhereUniqueInput";
import { ResourcesUpdateInput } from "./ResourcesUpdateInput";

export class ResourcesControllerBase {
  constructor(protected readonly service: ResourcesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Resources })
  async createResources(
    @common.Body() data: ResourcesCreateInput
  ): Promise<Resources> {
    return await this.service.createResources({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Resources] })
  @ApiNestedQuery(ResourcesFindManyArgs)
  async resourcesItems(@common.Req() request: Request): Promise<Resources[]> {
    const args = plainToClass(ResourcesFindManyArgs, request.query);
    return this.service.resourcesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Resources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resources(
    @common.Param() params: ResourcesWhereUniqueInput
  ): Promise<Resources | null> {
    const result = await this.service.resources({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Resources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResources(
    @common.Param() params: ResourcesWhereUniqueInput,
    @common.Body() data: ResourcesUpdateInput
  ): Promise<Resources | null> {
    try {
      return await this.service.updateResources({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Resources })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResources(
    @common.Param() params: ResourcesWhereUniqueInput
  ): Promise<Resources | null> {
    try {
      return await this.service.deleteResources({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
