/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TeamsService } from "../teams.service";
import { TeamsCreateInput } from "./TeamsCreateInput";
import { Teams } from "./Teams";
import { TeamsFindManyArgs } from "./TeamsFindManyArgs";
import { TeamsWhereUniqueInput } from "./TeamsWhereUniqueInput";
import { TeamsUpdateInput } from "./TeamsUpdateInput";

export class TeamsControllerBase {
  constructor(protected readonly service: TeamsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Teams })
  async createTeams(@common.Body() data: TeamsCreateInput): Promise<Teams> {
    return await this.service.createTeams({
      data: {
        ...data,

        department: data.department
          ? {
              connect: data.department,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        teamLeader: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Teams] })
  @ApiNestedQuery(TeamsFindManyArgs)
  async teamsItems(@common.Req() request: Request): Promise<Teams[]> {
    const args = plainToClass(TeamsFindManyArgs, request.query);
    return this.service.teamsItems({
      ...args,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        teamLeader: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Teams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async teams(
    @common.Param() params: TeamsWhereUniqueInput
  ): Promise<Teams | null> {
    const result = await this.service.teams({
      where: params,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        teamLeader: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Teams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTeams(
    @common.Param() params: TeamsWhereUniqueInput,
    @common.Body() data: TeamsUpdateInput
  ): Promise<Teams | null> {
    try {
      return await this.service.updateTeams({
        where: params,
        data: {
          ...data,

          department: data.department
            ? {
                connect: data.department,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          teamLeader: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Teams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTeams(
    @common.Param() params: TeamsWhereUniqueInput
  ): Promise<Teams | null> {
    try {
      return await this.service.deleteTeams({
        where: params,
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          teamLeader: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
